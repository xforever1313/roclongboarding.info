---
layout: layout
---

@using System.Linq;
@using System.Text;
@using MapPlugin;

@{
    bool displayMap =
        Model.Page.Bag.ContainsKey( "layout" ) && 
        ( Model.Page.Layout == "location" ) &&
        Model.Page.ShouldDisplayMap();

    bool displayElevation =
        Model.Page.Bag.ContainsKey( "layout" ) && 
        ( Model.Page.Layout == "location" ) &&
        Model.Page.ShouldDisplayElevation();
}

<article id="w3-container">
    <header class="w3-container w3-blue-grey">
        <h1>@Model.Page.Title</h1>
        @{
            string author = Model.Page.GetAuthor();
            if(string.IsNullOrWhiteSpace(author) == false)
            {
                @:<p>Written By: @author</p>
            }
        }
        <p>Posted on @Model.Page.Date.ToString( "D" )</p>
    </header>
    <div class="w3-padding w3-white w3-display-container">
        @Raw( Model.Content )
    </div>

    @if( displayMap )
    {
        <div class="w3-padding w3-white w3-display-container">
            <h2>Map</h2>
            <noscript>JavaScript Required to make a map.</noscript>
            <div id="mapid" style="width=100%;height:500px;"></div>
        </div>
    }

    @if( displayElevation )
    {
        MapInfo mapInfo = MapInfoCollection.Instance.PageMapInfo[Model.Page.Id];
        <div class="w3-padding w3-white w3-display-container">
            <h2>Elevation Data</h2>
            @foreach( Line coolLine in mapInfo.CoolLines )
            {
                <h3>@coolLine.Name</h3>
                <ul>
                    <li><strong>Segment Rating:</strong> @Rating.Cool</li>
                    <li><strong>Minimum Elevation:</strong> @coolLine.Coordinates.Min( c => c.Elevation.Value ) meters.</li>
                    <li><strong>Maximum Elevation:</strong> @coolLine.Coordinates.Max( c => c.Elevation.Value ) meters.</li>
                    <li><strong>Average Elevation:</strong> @coolLine.Coordinates.Average( c => c.Elevation.Value ) meters.</li>
                </ul>
                <noscript>JavaScript Required to make a graph.</noscript>
                <div id="elevMap@coolLine.Id"></div>
            }
            @foreach( Line mehLine in mapInfo.MehLines )
            {
                <h3>@mehLine.Name</h3>
                <ul>
                    <li><strong>Segment Rating:</strong> @Rating.Meh</li>
                    <li><strong>Minimum Elevation:</strong> @mehLine.Coordinates.Min( c => c.Elevation.Value ) meters.</li>
                    <li><strong>Maximum Elevation:</strong> @mehLine.Coordinates.Max( c => c.Elevation.Value ) meters.</li>
                    <li><strong>Average Elevation:</strong> @mehLine.Coordinates.Average( c => c.Elevation.Value ) meters.</li>
                </ul>
                <noscript>JavaScript Required to make a graph.</noscript>
                <div id="elevMap@mehLine.Id"></div>
            }
            @foreach( Line lameLine in mapInfo.LameLines )
            {
                <h3>@lameLine.Name</h3>
                <ul>
                    <li><strong>Segment Rating:</strong> @Rating.Lame</li>
                    <li><strong>Minimum Elevation:</strong> @lameLine.Coordinates.Min( c => c.Elevation.Value ) meters.</li>
                    <li><strong>Maximum Elevation:</strong> @lameLine.Coordinates.Max( c => c.Elevation.Value ) meters.</li>
                    <li><strong>Average Elevation:</strong> @lameLine.Coordinates.Average( c => c.Elevation.Value ) meters.</li>
                </ul>
                <noscript>JavaScript Required to make a graph.</noscript>
                <div id="elevMap@lameLine.Id"></div>
            }
        </div>
    }

    @if( Model.Comments )
    {
        <div class="w3-container">
            <h2>Comments</h2>
            <noscript>JavaScript is needed to load Comments.</noscript>
            <div id="disqus_thread"></div>
            <script>

            /**
            *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
            *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
            
            var disqus_config = function () {
                this.page.url = '@Model.Site.Config["url"].ToString()@Model.Page.Url';  // Replace PAGE_URL with your page's canonical URL variable
            };
            
            (function() { // DON'T EDIT BELOW THIS LINE
            var d = document, s = d.createElement('script');
            s.src = 'https://@(Model.Site.Config["disqus_shortname"].ToString()).disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
            })();
            </script>
            <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
            <a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>
        </div>
    }

    <footer class="w3-container w3-blue-grey">
        <div>
            @if( Model.Previous != null )
            {
                <a href="@Model.Previous.Url" title="Previous Post: @Model.Previous.Title">&larr; @Model.Previous.Title</a>
            }
            @if( Model.Next != null )
            {
                <a href="@Model.Next.Url" title="next Post: @Model.Next.Title">@Model.Next.Title &rarr; </a>
            }
        </div>
        <p>
            <strong>Posted In:</strong>
            @{
                foreach( string category in Model.Page.Categories )
                {
                    foreach( var page in Model.Site.Pages )
                    {
                        if( page.Bag.ContainsKey( "category" ) )
                        {
                            if( category.Equals( page.Bag["category"] ) )
                            {
                                @:<a href="@(page.Url)">@(category)</a> 
                            }
                        }
                    }
                }
            }
        </p>
        <p>
            <strong>Tagged As:</strong>
            @foreach( string tag in Model.Page.Tags )
            {
                foreach( var page in Model.Site.Pages )
                {
                    if( page.Bag.ContainsKey( "tag" ) )
                    {
                        if( tag.Equals( page.Bag["tag"] ) )
                        {
                            @:<a href="@(page.Url)">@(tag)</a>
                        }
                    }
                }
            }
        </p>
    </footer>
</article>

@if( displayMap )
{
    MapInfo info = MapInfoCollection.Instance.PageMapInfo[Model.Page.Id];
    Func<IReadOnlyList<GpsCoordinate>, string> getCoords = delegate( IReadOnlyList<GpsCoordinate> coords )
    {
        StringBuilder builder = new StringBuilder();
        builder.Append( "[" );
        foreach( GpsCoordinate coord in coords )
        {
            builder.Append( $"[{coord.Latitude}, {coord.Longitude}],");
        }

        builder.Remove( builder.Length - 1, 1 );
        builder.Append( "]");
        return builder.ToString();
    };

    <!-- SCRIPTS -AT THE BOTTOM TO REDUCE THE LOAD TIME-->
    <script src="/static/js/leaflet.js"></script>
    <script>
        // Create Map
        var map = L.map('mapid').setView([@info.CenterPoint.Latitude, @info.CenterPoint.Longitude], 13);

        // Pull from OSM API
        var osmURL = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png";

        // In order to use open street map, we need to attribute to it.
        var osmAttrib = 'Map Data &copy; <a href="http://openstreetmap.org/copyright">OpenStreetMap</a> contributors';

        // Create the OSM layer.
        var osm = new L.TileLayer( osmURL, { minZoom: 0, maxZoom: 18, attribution: osmAttrib});

        // Set the map to start at RIT at zoom level 3.
        // map.setView(new L.LatLng(43.085, -77.678419), 3);

        // Add the osm layer to the map
        map.addLayer(osm);

        // Create POI Icon
        var poiIcon = L.icon({
            iconUrl: "/static/img/leaflet/marker-icon.png",
            iconSize: [25, 41],
            iconAnchor:[12.5, 41],
            popupAnchor:[0, -30]
        });

        // Add the points of interest
        @foreach( PointOfInterest poi in info.PointsOfInterest )
        {
            <text>
            var poiHtml_@(poi.Id) = '<div class="left" style="overflow: auto; color: black;">@poi.Name</div>';
            var poiPopup_@(poi.Id) = L.popup({maxwidth:500}).setContent(poiHtml_@(poi.Id));
            var poiMarker_@(poi.Id) = L.marker([@poi.Coordinate.Latitude, @poi.Coordinate.Longitude]).setIcon(poiIcon).addTo(map).bindPopup(poiPopup_@(poi.Id));
            </text>
            if( string.IsNullOrWhiteSpace(poi.DocId) == false )
            {
                <text>
                    document.getElementById( '@poi.DocId' ).onclick = function (){
                        poiMarker_@(poi.Id).openPopup();
                        map.setView( [@poi.Coordinate.Latitude, @poi.Coordinate.Longitude] );
                        return false;
                    };
                </text>
            }
        }

        // Create Hazard Icon
        var poiIcon = L.icon({
            iconUrl: "/static/img/leaflet/marker-icon.png",
            iconSize: [25, 41],
            iconAnchor:[12.5, 41],
            popupAnchor:[0, -30]
        });

        // Add the Hazards
        @foreach( Hazard hazard in info.Hazards )
        {
            <text>
            var hazardHtml_@(hazard.Id) = '<div class="left" style="overflow: auto; color: black;">@hazard.Name</div>';
            var hazardPopup_@(hazard.Id) = L.popup({maxwidth:500}).setContent(hazardHtml_@(hazard.Id));
            var hazardMarker_@(hazard.Id) = L.marker([@hazard.Coordinate.Latitude, @hazard.Coordinate.Longitude]).setIcon(hazardIcon).addTo(map).bindPopup(hazardPopup_@(hazard.Id));
            </text>
            if( string.IsNullOrWhiteSpace(hazard.DocId) == false )
            {
                <text>
                    document.getElementById( '@hazard.DocId' ).onclick = function (){
                        hazardMarker_@(hazard.Id).openPopup();
                        map.setView( [@hazard.Coordinate.Latitude, @hazard.Coordinate.Longitude] );
                        return false;
                    };
                </text>
            }
        }

        // Add the Good Lines
        @foreach( Line coolLine in info.CoolLines )
        {
            string coordString = getCoords( coolLine.Coordinates );
            <text>
                var coolLine_@(coolLine.Id)_options = { color: 'green' };
                var coolLine_@(coolLine.Id) = L.polyline( @coordString, coolLine_@(coolLine.Id)_options );
                coolLine_@(coolLine.Id).addTo(map);

                var coolLineStartHtml_@(coolLine.Id) = '<div class="left" style="overflow: auto; color: black;">Start: @coolLine.Name</div>';
                var coolLineStartPopup_@(coolLine.Id) = L.popup({maxwidth:500}).setContent(coolLineStartHtml_@(coolLine.Id));
                var coolLineStartMarker_@(coolLine.Id) = L.circleMarker(
                    [@coolLine.Coordinates.First().Latitude, @coolLine.Coordinates.First().Longitude],
                    { color: 'green' }
                ).setRadius( 5 );
                coolLineStartMarker_@(coolLine.Id).addTo(map).bindPopup(coolLineStartPopup_@(coolLine.Id));

                var coolLineEndHtml_@(coolLine.Id) = '<div class="left" style="overflow: auto; color: black;">End: @coolLine.Name</div>';
                var coolLineEndPopup_@(coolLine.Id) = L.popup({maxwidth:500}).setContent(coolLineEndHtml_@(coolLine.Id));
                var coolLineEndMarker_@(coolLine.Id) = L.circleMarker(
                    [@coolLine.Coordinates.Last().Latitude, @coolLine.Coordinates.Last().Longitude],
                    { color: 'red' }
                ).setRadius( 5 );
                coolLineEndMarker_@(coolLine.Id).addTo(map).bindPopup(coolLineEndPopup_@(coolLine.Id));
            </text>
        }

        // Add the Meh Lines
        @foreach( Line mehLine in info.MehLines )
        {
            string coordString = getCoords( mehLine.Coordinates );
            <text>
                var mehLine_@(mehLine.Id)_options = { color: 'yellow' };
                var mehLine_@(mehLine.Id) = L.polyline( @coordString, mehLine_@(mehLine.Id)_options );
                mehLine_@(mehLine.Id).addTo(map);
            </text>
        }

        // Add the Lame Lines
        @foreach( Line lameLine in info.LameLines )
        {
            string coordString = getCoords( lameLine.Coordinates );
            <text>
                var lameLine_@(lameLine.Id)_options = { color: 'red' };
                var lameLine_@(lameLine.Id) = L.polyline( @coordString, lameLine_@(lameLine.Id)_options );
                lameLine_@(lameLine.Id).addTo(map);
            </text>
        }

        // Add the Good Polygons
        @foreach( Polygon coolPolygon in info.CoolPolygons )
        {
            string coordString = getCoords( coolPolygon.Coordinates );
            <text>
                var coolPolygon_@(coolPolygon.Id)_options = { color: 'green' };
                var coolPolygon_@(coolPolygon.Id) = L.polygon( @coordString, coolPolygon_@(coolPolygon.Id)_options );
                coolPolygon_@(coolPolygon.Id).addTo(map);
            </text>
        }

        // Add the Meh Polygons
        @foreach( Polygon mehPolygon in info.MehPolygons )
        {
            string coordString = getCoords( mehPolygon.Coordinates );
            <text>
                var mehPolygon_@(mehPolygon.Id)_options = { color: 'yellow' };
                var mehPolygon_@(mehPolygon.Id) = L.polygon( @coordString, mehPolygon_@(mehPolygon.Id)_options );
                mehPolygon_@(mehPolygon.Id).addTo(map);
            </text>
        }

        // Add the Lame Polygons
        @foreach( Polygon lamePolygon in info.LamePolygons )
        {
            string coordString = getCoords( lamePolygon.Coordinates );
            <text>
                var lamePolygon_@(lamePolygon.Id)_options = { color: 'red' };
                var lamePolygon_@(lamePolygon.Id) = L.polygon( @coordString, lamePolygon_@(lamePolygon.Id)_options );
                lamePolygon_@(lamePolygon.Id).addTo(map);
            </text>
        }
    </script>
}

@if( displayElevation )
{
}